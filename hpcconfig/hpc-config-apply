#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2020 EDF SA
# Contact:
#       CCN - HPC <dsp-cspit-ccn-hpc@edf.fr>
#       1, Avenue du General de Gaulle
#       92140 Clamart
#
# Authors: CCN - HPC <dsp-cspit-ccn-hpc@edf.fr>
#
# This file is part of hpc-config.
#
# hpc-config is free software: you can redistribute in and/or
# modify it under the terms of the GNU General Public License,
# version 2, as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with hpc-config. If not, see
# <http://www.gnu.org/licenses/>.

import locale
import argparse
import urllib3
import urllib3.util
import tarfile
import subprocess
import os.path
import configparser
import logging
import io
import shutil
import yaml
import platform

from sys import stdout

distribution = platform.dist()[0]
distribution_version = platform.dist()[1]

# Should be fixed on Fedora >= 23 and RHEL > 7
# see: https://bugzilla.redhat.com/show_bug.cgi?id=902094
if distribution == 'redhat':
    LOCALE = 'en_US.UTF-8'
else:
    LOCALE = 'C.UTF-8'

DEFAULT_TMPDIR = '/tmp'
DEFAULT_ENVIRONMENT = 'production'
DEFAULT_AREA = 'default'

PUPPET_CONF_PATH = '/etc/puppetlabs/puppet'
PUPPET_BIN_PATH = '/opt/puppetlabs/puppet/bin/puppet'

PUPPET_ENV_ARCHIVE_NAME = 'puppet-config-environment.tar.xz'
PUPPET_ENV_BASE_PATH = '%s/environments' % PUPPET_CONF_PATH
PUPPET_ENV_BASE_OWNER = 0
PUPPET_ENV_BASE_GROUP = 0
PUPPET_ENV_BASE_MODE = 0o700

KEYS_ARCHIVE_NAME = 'keys.tar.xz'
KEYS_BASE_PATH = '%s/secure' % PUPPET_CONF_PATH
KEYS_BASE_OWNER = 0
KEYS_BASE_GROUP = 0
KEYS_BASE_MODE = 0o700

HIERA_CONF_ARCHIVE_NAME = 'hiera.yaml'
HIERA_CONF_PATH = '%s/hiera.yaml' % PUPPET_CONF_PATH

NODES_YAML_ARCHIVE_NAME = 'cluster-nodes.yaml'
NODES_YAML_PATH = '/etc/hpc-config/cluster-nodes.yaml'

PUPPET_CONF_ARCHIVE_NAME = 'puppet.conf'
PUPPET_CONF_PATH = '%s/puppet.conf' % PUPPET_CONF_PATH

FACTS_CONF_PATH = '/var/lib/puppet/facts.d/hpc-config-facts.yaml'

KERNEL_CMDLINE_PREFIX = 'hpc_conf.'

PUPPET_STATUS_CODE = {
    0: 'OK Nothing to do',
    2: 'OK Actions successfull',
    4: 'FAIL No changes',
    6: 'FAIL Some errors during changes',
}


def get_parameter(key,
                  default,
                  config_section,
                  default_section,
                  args,
                  cmdline_args):
    if key in args:
        return vars(args)[key]
    if key in cmdline_args:
        return cmdline_args[key]
    if key in config_section:
        return config_section[key]
    if key in default_section:
        return default_section[key]
    return default


def parse_bool(obj):
    if type(obj) is bool:
        return obj
    if type(obj) is str:
        lower_str = obj.lower()
        if lower_str in ['y', 'yes', 't', 'true', 'on', '1']:
            return True
        elif lower_str in ['n', 'no', 'f', 'false', 'off', '0', '']:
            return False
        else:
            raise ValueError("Unable to parse string as a boolean: '%s'" % obj)
    if type(obj) is int:
        if obj == 0:
            return False
        else:
            return True


def get_parameters():
    params = {}

    args = parse_args()

    if 'config_file' in args:
        config = parse_config(vars(args)['config_file'])
    else:
        config = parse_config()

    if 'no_kernel_args' in args and vars(args)['no_kernel_args']:
        cmdline_args = {}
    else:
        cmdline_args = parse_kernel_cmdline()

    if 'DEFAULT' not in config:
        default_section = {}
    else:
        default_section = config['DEFAULT']

    # First get the environment
    env = get_parameter(
        'environment', DEFAULT_ENVIRONMENT, {},
        default_section, args, cmdline_args)
    params['environment'] = env

    # Get the area
    params['area'] = get_parameter(
        'area', DEFAULT_AREA, {},
        default_section, args, cmdline_args)

    # Find the environment section
    if env not in config:
        env_section = {}
    else:
        env_section = config[env]

    # Search params with defaults
    if 'TMPDIR' in os.environ.keys():
        default_tmpdir = os.environ['TMPDIR']
    else:
        default_tmpdir = DEFAULT_TMPDIR
    params['tmpdir'] = get_parameter(
        'tmpdir', default_tmpdir, env_section,
        default_section, args, cmdline_args)

    # Search other strings params
    for param_name in ['source', 'keys_source', 'deploy_step', 'tags']:
        params[param_name] = get_parameter(
            param_name, None,
            env_section, default_section, args, cmdline_args
        )
    # Search other integer params
    for param_name in ['verbosity']:
        params[param_name] = int(
            get_parameter(param_name, 0,
                          env_section, default_section, args, cmdline_args)
        )
    # Search other bool params
    for param_name in ['dry_run', 'profile', 'keep']:
        params[param_name] = parse_bool(
            get_parameter(param_name, False,
                          env_section, default_section, args, cmdline_args)
        )

    return params


def parse_config(file_path='/etc/hpc-config.conf'):
    config = configparser.ConfigParser()
    config.read(file_path)
    return config


def parse_kernel_cmdline(file_path='/proc/cmdline'):
    args = {}
    prefix_length = len(KERNEL_CMDLINE_PREFIX)
    with open(file_path, 'r') as file_cmdline:
        cmdline = file_cmdline.readlines()[0]
    for raw_option in cmdline.strip().split(' '):
        if raw_option.startswith(KERNEL_CMDLINE_PREFIX):
            raw_keyval = raw_option.split('=', 2)
            if len(raw_keyval) == 2:
                value = raw_keyval[1]
            else:
                value = True
            key = raw_keyval[0][prefix_length:]
            args[key] = value
    return args


def parse_args():
    parser = argparse.ArgumentParser(
        description='Apply the HPC Configuration.',
        argument_default=argparse.SUPPRESS
    )

    parser.add_argument('--dry-run',
                        dest='dry_run', action='store_true',
                        help="Don't actually perform configuration \
                        (still downloads env).")
    parser.set_defaults(dry_run=False)

    parser.add_argument('--keep', '-K',
                        dest='keep', action='store_true',
                        help="Keep local data at the end of the run.")
    parser.set_defaults(keep=False)

    parser.add_argument('--no-kernel-args', '-N',
                        dest='no_kernel_args', action='store_true',
                        help="Disable parsing of kernel cmdline arguments.")
    parser.set_defaults(no_kernel_args=False)

    parser.add_argument('--profile',
                        dest='profile', action='store_true',
                        help="Profile the puppet run.")
    parser.set_defaults(profile=False)

    parser.add_argument('--config', '-c',
                        dest='config_file',
                        nargs='?', help='Configuration file')

    parser.add_argument('--source', '-s',
                        dest='source',
                        nargs='?', help='Configuration source URL')

    parser.add_argument('--environment', '-e',
                        dest='environment',
                        nargs='?', help='Environment name')

    parser.add_argument('--area', '-a',
                        dest='area',
                        nargs='?', help='Aera name')

    parser.add_argument('--tmpdir', '-t',
                        dest='tmpdir',
                        nargs='?', help='Change TMPDIR env for puppet run.')

    parser.add_argument('--deploy-step', '-d',
                        dest='deploy_step',
                        nargs='?', help='Deploy step',
                        choices=['production', 'usbdisk'])

    parser.add_argument('--keys-source', '-k',
                        dest='keys_source',
                        nargs='?', help='Secret keys source')

    parser.add_argument('--tags',
                        dest='tags',
                        nargs='?', help='Puppet tags (comma separated list)')

    parser.add_argument('--verbose', '-v',
                        dest='verbosity', action='count',
                        help='More output, can be specified multiple times.')

    return parser.parse_args()


def setup_logging(verbosity=0):
    if verbosity >= 3:
        level = logging.DEBUG
    elif verbosity >= 1:
        level = logging.INFO
    else:
        level = logging.WARNING
    logging.basicConfig(level=level)


def ensure_directory(path, owner=0, group=0, mode=0o700):
    if not os.path.isdir(path):
        os.mkdir(path)
    os.chown(path, owner, group)
    os.chmod(path, mode)


def http_get_file(url, root_source_port=False):
    parsed_url = urllib3.util.parse_url(url)
    connect_ok = False
    source_port = 1024
    while not connect_ok and source_port != 0:
        if root_source_port:
            source_port -= 1
        else:
            source_port = 0
        if parsed_url.scheme == 'https':
            http = urllib3.connection.HTTPSConnection(
                host=parsed_url.host, port=parsed_url.port,
                source_address=('0.0.0.0', source_port)
            )
        else:
            http = urllib3.connection.HTTPConnection(
                host=parsed_url.host, port=parsed_url.port,
                source_address=('0.0.0.0', source_port)
            )
        try:
            logging.debug("Trying to connect with source port %s", source_port)
            http.connect()
            connect_ok = True
        except urllib3.exceptions.NewConnectionError as err:
            logging.warn(
                "Failed to connect to http(s) server %s with " % url +
                "source port: %s, error: %s. Retrying..." % (source_port, err)
            )
            http.close()

    if not connect_ok:
        raise RuntimeError(
            "Failed to connect to the server to get url: %s" % url
        )

    headers = {
        'Host': "%s:%s" % (parsed_url.host, parsed_url.port),
        'User-Agent': 'hpc-config-apply',
    }
    http.request('GET', parsed_url.path, headers=headers)
    response = http.getresponse()

    if response.status >= 400:
        raise RuntimeError("Bad HTTP Status (%s), reason: %s" %
                           (response.status, response.reason))
    data = response.read()
    source_file = io.BytesIO(data)
    http.close()

    return source_file


def get_file_for_url(url, root_source_port=False):
    parsed_url = urllib3.util.parse_url(url)
    if parsed_url.scheme in [None, 'file']:
        url_file = open(parsed_url.path, 'rb')
    else:
        url_file = http_get_file(url, root_source_port)
    return url_file


def extract_url(url, path, root_source_port=False):
    source_file = get_file_for_url(url, root_source_port)
    archive = tarfile.open(fileobj=source_file, mode='r:xz')
    archive.extractall(path=path)
    source_file.close()


def get_url(url, path, root_source_port=False):
    source_file = get_file_for_url(url)
    dest = open(path, 'wb')

    buffer_size = 1024
    while 1:
        copy_buffer = source_file.read(buffer_size)
        if not copy_buffer:
            break
        dest.write(copy_buffer)

    source_file.close()
    dest.close()


def get_keys(source):
    ensure_directory(KEYS_BASE_PATH,
                     KEYS_BASE_OWNER,
                     KEYS_BASE_GROUP,
                     KEYS_BASE_MODE)
    if source is None:
        logging.info(
            "Keys source is undefined. Skipping retrieval of keys.")
        return
    keys_url = '/'.join([source.rstrip('/'), KEYS_ARCHIVE_NAME])
    keys_path = os.path.join(KEYS_BASE_PATH, 'keys')
    logging.info("Getting secure keys from %s", keys_url)
    if os.path.isdir(keys_path):
        shutil.rmtree(keys_path)
    extract_url(keys_url, KEYS_BASE_PATH, root_source_port=True)
    return


def get_hiera_conf(source, environment, version='latest'):
    if source is None:
        logging.info(
            "Source is undefined. Skipping retrieval of Hiera config.")
        return
    hiera_conf_url = '/'.join([
        source.rstrip('/'),
        environment,
        version,
        HIERA_CONF_ARCHIVE_NAME
    ])
    logging.info("Getting Hiera config from %s", hiera_conf_url)
    if os.path.exists(HIERA_CONF_PATH):
        os.remove(HIERA_CONF_PATH)
    get_url(hiera_conf_url, HIERA_CONF_PATH)
    return


def get_nodes_yaml(source, environment, version='latest'):
    if source is None:
        logging.info("Source is undefined. Skipping retrieval of %s.",
                     NODES_YAML_ARCHIVE_NAME)
        return
    nodes_yaml_url = '/'.join([
        source.rstrip('/'),
        environment,
        version,
        NODES_YAML_ARCHIVE_NAME
    ])
    parent_dir = os.path.dirname(NODES_YAML_PATH)
    logging.info("Getting cluster nodes config from %s", nodes_yaml_url)
    if os.path.exists(NODES_YAML_PATH):
        os.remove(NODES_YAML_PATH)
    get_url(nodes_yaml_url, NODES_YAML_PATH)
    return


def get_puppet_conf(source, environment, version='latest'):
    if source is None:
        logging.info(
            "Source is undefined. Skipping retrieval of Puppet Config.")
        return
    puppet_conf_url = '/'.join([
        source.rstrip('/'),
        environment,
        version,
        PUPPET_CONF_ARCHIVE_NAME
    ])
    logging.info(
        "Getting Puppet config from %s" % puppet_conf_url
    )
    if os.path.exists(PUPPET_CONF_PATH):
        os.remove(PUPPET_CONF_PATH)
    get_url(puppet_conf_url, PUPPET_CONF_PATH)
    return


def get_puppet_environment(source, environment, area, version='latest'):
    ensure_directory(PUPPET_ENV_BASE_PATH,
                     PUPPET_ENV_BASE_OWNER,
                     PUPPET_ENV_BASE_GROUP,
                     PUPPET_ENV_BASE_MODE)
    if source is None:
        logging.info(
            "Source is undefined. Skipping retrieval of Puppet Environment.")
        return
    env_url = '/'.join([
        source.rstrip('/'),
        environment,
        version,
        area,
        PUPPET_ENV_ARCHIVE_NAME
    ])
    puppet_env_path = os.path.join(PUPPET_ENV_BASE_PATH, environment)
    logging.info(
        "Getting Puppet HPC configuration environment from %s", env_url
    )
    if os.path.isdir(puppet_env_path):
        shutil.rmtree(puppet_env_path)
    extract_url(env_url, PUPPET_ENV_BASE_PATH)
    return


def gen_private_files_fact(source, environment, area):
    """Generate a custom static external fact for private_files_dir based on
       source, environment and area."""
    logging.info("Generating private files directory external static fact %s",
                 FACTS_CONF_PATH)
    content = {
        'private_files_dir':
            "%s/%s/latest/files/%s" % (source, environment, area)
    }

    parent_dir = os.path.dirname(FACTS_CONF_PATH)
    if not os.path.isdir(parent_dir):
        logging.debug("Creating parent directory %s", parent_dir)
        os.makedirs(parent_dir, 0o755)

    with open(FACTS_CONF_PATH, 'w+') as fact_f:
        fact_f.write(yaml.dump(content))


def puppet_apply(environment,
                 deploy_step,
                 verbosity=0,
                 dry_run=False,
                 profile=False,
                 tmpdir=None,
                 tags=None):
    logging.info("Applying puppet configuration.")

    if verbosity >= 3:
        apply_options = ['--debug']
    elif verbosity == 2:
        apply_options = ['--test']
    elif verbosity == 1:
        apply_options = ['--verbose']
    else:
        apply_options = ['--logdest', 'syslog']

    if tags is not None and tags != '':
        apply_options += ['--tags', tags]

    if dry_run:
        apply_options += ['--noop']

    if profile:
        apply_options += ['--profile']

    manifests_path = os.path.join(
        PUPPET_ENV_BASE_PATH, environment, 'manifests', 'cluster.pp')

    env_vars = os.environ.copy()
    if tmpdir is not None:
        logging.debug("Set TMPDIR for puppet run to: '%s'", tmpdir)
        env_vars['TMPDIR'] = tmpdir

    logging.debug('Calling Puppet with options: %s', apply_options)
    # environment is puppet environment
    # env_vars is process environment variables
    actual_code = subprocess.call(
        [PUPPET_BIN_PATH, 'apply'] +
        apply_options +
        ['--environment', environment, manifests_path],
        env=env_vars
    )

    # With puppet, code 2 is special and means, action performed
    # without error, so we change that to 0
    if actual_code == 2:
        logging.info("Puppet return code is 2, so returning success")
        code = 0
    else:
        code = actual_code
    meaning = 'Unknown return code'
    if actual_code in PUPPET_STATUS_CODE.keys():
        meaning = PUPPET_STATUS_CODE[actual_code]
    logging.info(
        "Final return code for puppet apply is: %s, actual code was %s(%s)",
        code, actual_code, meaning)
    return code


def clean(environment, keep=False):
    """
       Remove the local files from the run
    """
    puppet_env_path = os.path.join(PUPPET_ENV_BASE_PATH, environment)
    if not keep and os.path.isdir(puppet_env_path):
        logging.info("Cleaning environment path: %s", puppet_env_path)
        shutil.rmtree(puppet_env_path)

    if keep:
        logging.info("Local files have been kept as requested (--keep)")


if __name__ == "__main__":
    locale.setlocale(locale.LC_ALL, LOCALE)

    params = get_parameters()

    verbosity = params['verbosity']
    environment = params['environment']
    area = params['area']
    keys_source = params['keys_source']
    source = params['source']
    deploy_step = params['deploy_step']
    dry_run = params['dry_run']
    tags = params['tags']
    tmpdir = params['tmpdir']
    keep = params['keep']
    profile = params['profile']

    if stdout.isatty() and verbosity == 0:
        verbosity = 1

    setup_logging(verbosity)
    logging.debug("Parameters: %s.", params)

    get_keys(keys_source)

    get_puppet_environment(source, environment, area)

    get_hiera_conf(source, environment)

    get_nodes_yaml(source, environment)

    get_puppet_conf(source, environment)

    gen_private_files_fact(source, environment, area)

    code = puppet_apply(environment=environment,
                        deploy_step=deploy_step,
                        verbosity=verbosity,
                        dry_run=dry_run,
                        profile=profile,
                        tags=tags,
                        tmpdir=tmpdir
                        )

    clean(environment, keep)

    exit(code)

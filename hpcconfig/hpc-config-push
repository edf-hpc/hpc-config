#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2020 EDF SA
# Contact:
#       CCN - HPC <dsp-cspit-ccn-hpc@edf.fr>
#       1, Avenue du General de Gaulle
#       92140 Clamart
#
# Authors: CCN - HPC <dsp-cspit-ccn-hpc@edf.fr>
#
# This file is part of hpc-config.
#
# hpc-config is free software: you can redistribute in and/or
# modify it under the terms of the GNU General Public License,
# version 2, as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with hpc-config. If not, see
# <http://www.gnu.org/licenses/>.

import os
import fnmatch
import argparse
import configparser
from io import StringIO
import tarfile
import sys
import subprocess
import logging
logger = logging.getLogger(__name__)
import tempfile
import glob
import shutil
import stat
import warnings
import yaml
from multiprocessing.dummy import Pool as ThreadPool
from multiprocessing import Pool

from hpcconfig import environmentHandler
from hpcconfig.system import os_distribution, os_major_version

from cryptography import utils

_area_passwords_cache = {}

def conf_copy(src, dst, *, follow_symlinks=True):
    """Alternate copy function for shutil.copytree() in order to properly
       resolve and copy symlinks to directories. It is used to copy private
       files into the tmp directory. If the path is a directory, call copytree()
       with self as copy_function, otherwise (flat file) call copy2()."""
    if os.path.isdir(src):
        # if dst already exist, skip level by calling conf_copy() on src/*
        if os.path.exists(dst):
            for item in os.listdir(src):
                subsrc = os.path.join(src, item)
                subdst = os.path.join(dst, item)
                conf_copy(subsrc, subdst, follow_symlinks=follow_symlinks)
        else:
            shutil.copytree(src, dst,
                            symlinks=not follow_symlinks,
                            copy_function=conf_copy)
    else:
        shutil.copy2(src, dst, follow_symlinks=follow_symlinks)

class AppConf():
    """Runtime configuration class."""

    def __init__(self):

        self.copy_fun = conf_copy
        self.debug = False
        self.conf_file = None
        self.cluster = None
        self.environment = None
        self.version = None

        self.mode = None

        ## Common parameters
        self.destination_root = None

        ## Posix Parameters
        self.posix_file_mode = None
        self.posix_dir_mode = None

        ## S3 parameters
        self.s3_access_key = None
        self.s3_secret_key = None
        self.s3_bucket_name = None
        self.s3_host = None
        self.s3_port = None

        ## SFTP parameters
        self.sftp_hosts = None
        self.sftp_username = None
        self.sftp_private_key = None

        # action

        self.full_tmp_cleanup = False
        self.list_environments = False

        # paths

        self.conf_puppet = None
        self.conf_hiera = None
        # This one is hard-coded, there is no configuration parameter to
        # change it since it would be irrelevant to change it.
        self.conf_environment = 'environment.conf'
        self.nodes_private = None
        self.dir_modules_generic = None
        self.dir_modules_private = None
        self.dir_manifests_generic = None
        self.dir_manifests_private = None
        self.dir_hieradata_generic = None
        self.dir_hieradata_private = None
        self.src_dir_hieradata_private = None
        self.dir_files_private = None
        self.src_dir_files_private = None


        self.dir_tmp = None
        self.dir_tmp_gen = None

    def dump(self):
        logger.debug("runtime configuration dump:")
        logger.debug("- debug: %s", str(self.debug))
        logger.debug("- conf_file: %s", str(self.conf_file))
        logger.debug("- cluster: %s", str(self.cluster))
        logger.debug("- environment: %s", str(self.environment))
        logger.debug("- version: %s", str(self.version))
        logger.debug("- mode: %s", str(self.mode))
        logger.debug("- destination_root: %s", str(self.destination_root))
        logger.debug("- destination: %s", str(self.destination))
        logger.debug("- areas: %s", str(self.areas))
        logger.debug("- dir_tmp: %s", str(self.dir_tmp))
        logger.debug("- conf_puppet: %s", str(self.conf_puppet))
        logger.debug("- conf_hiera: %s", str(self.conf_hiera))
        logger.debug("- nodes_private: %s", str(self.nodes_private))
        logger.debug("- dir_modules_generic: %s", str(self.dir_modules_generic))
        logger.debug("- dir_modules_private: %s", str(self.dir_modules_private))
        logger.debug("- dir_manifests_generic: %s", str(self.dir_manifests_generic))
        logger.debug("- dir_manifests_private: %s", str(self.dir_manifests_private))
        logger.debug("- dir_hieradata_generic: %s", str(self.dir_hieradata_generic))
        logger.debug("- src_dir_hieradata_private: %s", str(self.src_dir_hieradata_private))
        logger.debug("- src_dir_files_private: %s", str(self.src_dir_files_private))
        logger.debug("- posix_file_mode: %s", str(self.posix_file_mode))
        logger.debug("- posix_dir_mode: %s", str(self.posix_dir_mode))
        logger.debug("- s3_access_key: %s", str(self.s3_access_key))
        logger.debug("- s3_secret_key: %s", str(self.s3_secret_key))
        logger.debug("- s3_bucket_name: %s", str(self.s3_bucket_name))
        logger.debug("- s3_port: %s", str(self.s3_port))
        logger.debug("- s3_host: %s", str(self.s3_host))
        logger.debug("- sftp_hosts: %s", str(self.sftp_hosts))
        logger.debug("- sftp_username: %s", str(self.sftp_username))
        logger.debug("- sftp_private_key: %s", str(self.sftp_private_key))

    def archive_path(self, area):
        return os.path.join(self.dir_tmp_gen, area, 'puppet-config-environment.tar.xz')

    @property
    def conf_environment_gen(self):
        """Path where environment.conf is generated."""
        return os.path.join(self.dir_tmp_gen, self.conf_environment)

    @property
    def destination(self):
        return os.path.join(self.destination_root, self.environment, self.version)

conf = AppConf()            # global runtime configuration object

def parse_conf():
    """Parse configuration file and set runtime configuration accordingly.
       Here are defined default configuration file parameters."""
    defaults = StringIO(
      "[global]\n"
      "cluster = unknown\n"
      "environment = production\n"
      "version = latest\n"
      "mode = posix\n"
      "destination = /var/www/html/hpc-config\n"
      "areas = default\n"
      "[posix]\n"
      "file_mode = 644\n"
      "dir_mode = 755\n"
      "[s3]\n"
      "access_key = XXXXXXXX\n"
      "secret_key = YYYYYYYYYYYYYYYY\n"
      "bucket_name = system\n"
      "host = rgw.service.virtual\n"
      "port = 7480\n"
      "[sftp]\n"
      "hosts = localhost\n"
      "username = root\n"
      "private_key = /root/.ssh/id_rsa\n"
      "[paths]\n"
      "tmp = /tmp/puppet-config-push\n"
      "puppethpc = puppet-hpc\n"
      "privatedata = hpc-privatedata\n"
      "puppet_conf = ${privatedata}/puppet-config/${global:cluster}/puppet.conf\n"
      "hiera_conf = ${privatedata}/puppet-config/${global:cluster}/hiera.yaml\n"
      "nodes_private = ${privatedata}/puppet-config/${global:cluster}/cluster-nodes.yaml\n"
      "modules_generic = ${puppethpc}/puppet-config/cluster,${puppethpc}/puppet-config/modules,/usr/share/puppet/modules\n"
      "modules_private = ${privatedata}/puppet-config/${global:cluster}/modules\n"
      "manifests_generic = ${puppethpc}/puppet-config/manifests\n"
      "manifests_private = ${privatedata}/puppet-config/${global:cluster}/manifests\n"
      "hieradata_generic = ${puppethpc}/hieradata\n"
      "hieradata_private = ${privatedata}/hieradata\n"
      "files_private = ${privatedata}/files/${global:cluster}\n")
    parser = configparser.ConfigParser()
    parser._interpolation = configparser.ExtendedInterpolation()
    parser.readfp(defaults)
    parser.read(conf.conf_file)
    conf.cluster = parser.get('global', 'cluster')
    conf.environment = parser.get('global', 'environment')
    conf.version = parser.get('global', 'version')
    conf.mode = parser.get('global', 'mode')
    conf.destination_root = parser.get('global', 'destination')
    conf.areas = parser.get('global', 'areas').split(',')
    conf.main_area = conf.areas[0] # the main area is the first declared area
    conf.dir_tmp = parser.get('paths', 'tmp')
    conf.conf_puppet = parser.get('paths', 'puppet_conf')
    conf.conf_hiera = parser.get('paths', 'hiera_conf')
    if parser.has_option('paths', 'facts_private'):
        logger.warning('configuration facts_private is deprecated, use nodes_private')
    conf.nodes_private = parser.get('paths', 'nodes_private')
    conf.dir_modules_generic = parser.get('paths', 'modules_generic').split(',')
    conf.dir_modules_private = parser.get('paths', 'modules_private')
    conf.dir_manifests_generic = parser.get('paths', 'manifests_generic')
    conf.dir_manifests_private = parser.get('paths', 'manifests_private')
    conf.dir_hieradata_generic = parser.get('paths', 'hieradata_generic')
    conf.src_dir_hieradata_private = parser.get('paths', 'hieradata_private')
    conf.src_dir_files_private = parser.get('paths', 'files_private')
    conf.s3_access_key = parser.get('s3', 'access_key')
    conf.s3_secret_key = parser.get('s3', 'secret_key')
    conf.s3_bucket_name = parser.get('s3', 'bucket_name')
    conf.s3_host = parser.get('s3', 'host')
    conf.s3_port = int(parser.get('s3', 'port'))
    conf.sftp_hosts = parser.get('sftp', 'hosts').split(',')
    conf.sftp_username = parser.get('sftp', 'username')
    conf.sftp_private_key = parser.get('sftp', 'private_key')
    conf.posix_file_mode = int(parser.get('posix', 'file_mode'), 8)
    conf.posix_dir_mode = int(parser.get('posix', 'dir_mode'), 8)

def parse_args():
    """Parses CLI args, then set debug flag and configuration file path in
       runtime configuration accordingly, and returns the args."""
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--debug',
                        help='Enable debug mode',
                        action='store_true')
    parser.add_argument('-c', '--conf',
                        help='Path to the configuration file',
                        nargs='?',
                        default='/etc/hpc-config/push.conf')
    parser.add_argument('-e', '--environment',
                        help='Name of the pushed environment',
                        nargs='?')
    parser.add_argument('-V', '--version',
                        help='Version of the pushed config',
                        nargs='?')
    parser.add_argument('--full-tmp-cleanup',
                        help='Full tmp dir cleanup.',
                        action='store_true')
    parser.add_argument('-l', '--list',
                        help='List pushed environments.',
                        action='store_true')
    parser.add_argument('--enable-python-warnings',
                        help="Don't hide some Python warnings.",
                        action='store_true')
    args = parser.parse_args()

    if args.debug:
        conf.debug = True
    if args.conf:
        conf.conf_file = args.conf

    return args

def setup_warnings(enable=False):

    try:
        warnings.simplefilter("ignore", utils.CryptographyDeprecationWarning)
    except AttributeError:
        pass

    if not enable:
        warnings.filterwarnings("ignore", category=DeprecationWarning)
        warnings.filterwarnings("ignore", category=FutureWarning)

def setup_logger():

    if conf.debug is True:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)
    handler = logging.StreamHandler()
    formatter = logging.Formatter('%(levelname)s: %(message)s')
    handler.setFormatter(formatter)
    logger.addHandler(handler)

def override_conf(args):
    """Override configuration files parameters with args values."""
    if args.environment:
        conf.environment = args.environment
    if args.version:
        conf.version = args.version
    if args.full_tmp_cleanup:
        conf.full_tmp_cleanup = True
    if args.list:
        conf.list_environments = True


def init_tmpd():
    """Create tmp directory used to build areas archives, areas private files
       hierarchy and perform on-the-fly re-encryptions.

       This procedures also copies the private hiera repository to this
       temporary directory in order to avoid later on-the-fly re-encryption of
       area eyaml files into the sysadmin local copy, which would lead to local
       modifications of their Git repositories.

       The procedures also set some conf.dir_* parameters appropriately.
    """
    if not os.path.isdir(conf.dir_tmp):
        os.makedirs(conf.dir_tmp)
    conf.dir_tmp_gen = tempfile.mkdtemp(dir=conf.dir_tmp)
    conf.dir_tmp_keys = os.path.join(conf.dir_tmp_gen, 'keys')

    conf.dir_hieradata_private = os.path.join(conf.dir_tmp_gen,
                                              'private_build',
                                              conf.src_dir_hieradata_private)
    conf.dir_files_private = os.path.join(conf.dir_tmp_gen,
                                          'private_build',
                                          'files')
    shutil.copytree(conf.src_dir_hieradata_private,
                    conf.dir_hieradata_private,
                    copy_function=conf_copy)


def get_area_decrypt_password(area):
    """This function decrypt and parse the cluster_decrypt_password of a given
       area.

       This function can only work _before_ eyaml files are re-encrypted with
       reencrypt_area_eyaml_file()."""
    if area in _area_passwords_cache.keys():
        return _area_passwords_cache[area]

    # get cluster_decrypt_password from area yaml file using eyaml and system
    # keys:
    #   eyaml decrypt --file $hieradata/$cluster/areas/$area.yaml
    area_yaml_path = os.path.join(conf.dir_hieradata_private, conf.cluster,
                                  'areas', area + '.yaml')
    cmd = ['eyaml', 'decrypt', '--file', area_yaml_path]
    eyaml_run = subprocess.check_output(cmd)
    area_yaml = yaml.load(eyaml_run)
    _area_passwords_cache[area] = area_yaml['cluster_decrypt_password']
    return _area_passwords_cache[area]


def enable_password_derivation():
    """Returns a boolean to tell if password derivation can be used with
       OpenSSL. It is disabled on Debian < 10 (eg. in stretch) because it is
       not supported by openssl provided in these old distributions.

       This code can be safely removed when Debian 9 stretch support is
       dropped."""

    return os_distribution() != 'debian' or os_major_version() > 9


def enc_cmd(infile, outfile, key, decrypt=False):
    """Runs the appropriate openssl command for the operation on the
       current system."""

    cmd = ['openssl', 'enc', '-aes-256-cbc', '-md', 'sha256',
           '-in', infile,
           '-out', outfile,
           '-k', key ]
    if decrypt:
        cmd.insert(5, '-d')
    if enable_password_derivation():
        # The number of iterations is hard-coded as it must be changed
        # synchronously on both clara and puppet-hpc for seamless handling of
        # encrypted files. It is set explicitely to avoid relying on openssl
        # default value and being messed by sudden change of this default
        # value.
        cmd[3:3] = ['-iter', '+100000', '-pbkdf2' ]
    else:
        logger.debug("password derivation is disabled on this system")
    proc = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if proc.returncode:
        logger.error("failed to run openssl command: %s", proc.stderr.decode())
        cleanup_run()
        sys.exit(1)


def encrypt_file(infile, outfile, key):
    """Run openssl to encrypt infile with AES key."""
    enc_cmd(infile, outfile, key)


def decrypt_file(infile, outfile, key):
    """Run openssl to decrypt infile with AES key."""
    enc_cmd(infile, outfile, key, True)


def decrypt_extract_eyaml_keys():
    """This procedures decrypt and extract all areas (except main area) eyaml
       encryption keys. These keys will be required later by
       reencrypt_area_eyaml_file() to reencrypt the area eyaml file."""
    main_area_encoding_key = get_area_decrypt_password(conf.main_area)
    for area in conf.areas:
        if area != conf.main_area:
            # decrypt other area eyaml keys archive from source files into tmpdir
            other_area_keys_dir = os.path.join(conf.src_dir_files_private, conf.main_area, 'eyaml', area)
            other_area_keys_path_in = os.path.join(other_area_keys_dir, 'keys.tar.xz.enc')
            other_area_keys_path_out = os.path.join(conf.dir_tmp_keys, area, 'keys.tar.xz')
            logger.debug("decrypt/extract eyaml keys %s of area %s", other_area_keys_path_in, area)
            os.makedirs(os.path.join(conf.dir_tmp_keys, area))
            decrypt_file(other_area_keys_path_in, other_area_keys_path_out,main_area_encoding_key)
            other_area_keys_arch = tarfile.open(other_area_keys_path_out, mode='r')
            other_area_keys_arch.extractall(path=os.path.join(conf.dir_tmp_keys, area))


def reencrypt_area_eyaml_file(area):
    """Reencrypt the area eyaml file with the area eyaml keys previously
       extracted by decrypt_extract_eyaml_keys()."""
    area_eyaml_file_path   = os.path.join(conf.dir_hieradata_private, conf.cluster,
                                         'areas', area + '.yaml')
    area_eyaml_private_key = os.path.join(conf.dir_tmp_keys, area,
                                          'keys', 'private_key.pkcs7.pem')
    area_eyaml_public_key  = os.path.join(conf.dir_tmp_keys, area,
                                          'keys', 'public_key.pkcs7.pem')
    logger.debug("reencrypt %s with area %s eyaml keys",
                 area_eyaml_file_path, area)

    # decrypt the file using system keys with:
    #   eyaml decrypt --eyaml $FILE
    cmd = ['eyaml', 'decrypt', '--eyaml', area_eyaml_file_path]
    eyaml_run = subprocess.check_output(cmd, universal_newlines=True)
    # rewrite the buffered output to the file
    with open(area_eyaml_file_path, 'w') as fh:
        fh.write(eyaml_run)

    # recrypt the file with:
    #   eyaml recrypt --pkcs7-private-key $PRIV --pkcs7-public-key $PUB $FILE
    cmd = ['eyaml', 'recrypt',
           '--pkcs7-private-key', area_eyaml_private_key,
           '--pkcs7-public-key', area_eyaml_public_key,
           area_eyaml_file_path]
    subprocess.check_call(cmd)


def build_tarballs():
    """Build the tarballs for all areas."""
    for area in conf.areas:
        build_tarball(area)


def build_tarball(area):

    logger.info("creating archive %s", conf.archive_path(area))
    os.makedirs(os.path.dirname(conf.archive_path(area)))
    tar = tarfile.open(name=conf.archive_path(area), mode='w:xz', dereference=True)

    # generic modules
    seen_modules = []
    for modulesdir in conf.dir_modules_generic:

        if os.path.exists(modulesdir) and \
           os.path.isdir(modulesdir):

            # detect and raise error in case of module conflict
            new_modules = os.listdir(modulesdir)
            intersect = list(set(seen_modules) & set(new_modules))
            if len(intersect):
                logger.error("modules conflict in %s: %s", modulesdir, str(intersect))
                sys.exit(1)
            seen_modules += new_modules

            logger.debug("adding generic modules dir %s: %s", modulesdir, str(new_modules))
            tar.add(modulesdir, arcname=os.path.join(conf.environment, 'modules_generic'))
        else:
            logger.warning("Configured generic modules dir is missing: '%s'",
                           modulesdir)

    # private modules
    if os.path.exists(conf.dir_modules_private) and \
       os.path.isdir(conf.dir_modules_private):
        logger.debug("adding private modules dir %s", conf.dir_modules_private)
        tar.add(conf.dir_modules_private, arcname=os.path.join(conf.environment, 'modules_private'))
    else:
        logger.warning("Configured private modules dir is missing: '%s'",
                       conf.dir_modules_private)
    # generic manifests
    if os.path.exists(conf.dir_manifests_generic) and \
       os.path.isdir(conf.dir_manifests_generic):
        logger.debug("adding generic manifests dir %s", conf.dir_manifests_generic)
        tar.add(conf.dir_manifests_generic, arcname=os.path.join(conf.environment, 'manifests'))
    else:
        logger.warning("Configured generic manifests dir is missing: '%s'",
                       conf.dir_manifests_generic)
    # private manifests
    if os.path.exists(conf.dir_manifests_private) and \
       os.path.isdir(conf.dir_manifests_private):
        logger.debug("adding private manifests dir %s", conf.dir_manifests_private)
        tar.add(conf.dir_manifests_private, arcname=os.path.join(conf.environment, 'manifests'))
    else:
        logger.warning("Configured private manifests dir is missing: '%s'",
                       conf.dir_manifests_private)
    # generic hieradata
    if os.path.exists(conf.dir_hieradata_generic) and \
       os.path.isdir(conf.dir_hieradata_generic):
        logger.debug("adding generic hieradata dir %s", conf.dir_hieradata_generic)
        tar.add(conf.dir_hieradata_generic, arcname=os.path.join(conf.environment, 'hieradata', 'generic'))
    else:
        logger.warning("Configured generic hieradata dir is missing: '%s'",
                       conf.dir_hieradata_generic)
    # private hieradata
    if os.path.exists(conf.dir_hieradata_private) and \
       os.path.isdir(conf.dir_hieradata_private):
        logger.debug("adding private hieradata dir %s", conf.dir_hieradata_private)
        # The area tarbal must contain these files:
        #   $dir_hieradata_private/*.yaml
        #   $dir_hieradata_private/$cluster/*.yaml
        #   $dir_hieradata_private/$cluster/roles/*.yaml
        #   $dir_hieradata_private/$cluster/areas/$area.yaml
        base_arcname = os.path.join(conf.environment, 'hieradata', 'private')
        arch_files = \
          glob.glob(os.path.join(conf.dir_hieradata_private, '*.yaml')) + \
          glob.glob(os.path.join(conf.dir_hieradata_private, conf.cluster, '*.yaml')) + \
          glob.glob(os.path.join(conf.dir_hieradata_private, conf.cluster, 'roles', '*.yaml')) + \
          [ os.path.join(conf.dir_hieradata_private, conf.cluster, 'areas', area + '.yaml') ]
        if area != conf.main_area:
            # re-enc area yaml file
            reencrypt_area_eyaml_file(area)
        for arch_file in arch_files:
            # remove dir_hieradata_private from arch_file
            subpath = arch_file[len(conf.dir_hieradata_private)+1:]
            tar.add(arch_file,
                    arcname=os.path.join(base_arcname, subpath),
                    recursive=False)
    else:
        logger.warning("Configured private hieradata dir is missing: '%s'",
                       conf.dir_hieradata_private)

    logger.debug("adding environment conf")
    tar.add(conf.conf_environment_gen, arcname=os.path.join(conf.environment, conf.conf_environment))

    tar.close()

def gen_env_conf():

    with open(conf.conf_environment_gen, 'w+') as env_f:
        env_f.write("modulepath=modules_private:modules_generic\n")
        env_f.write("manifest=manifests/cluster.pp\n")


def reenc_file(encrypted_file, source_key, dest_key):
    logger.debug("reencrypt private file %s with cluster_decrypt_password",
                 encrypted_file)
    # decrypt and re-encrypt file
    unencrypted_file = encrypted_file[:-4]
    decrypt_file(encrypted_file, unencrypted_file, source_key)
    encrypt_file(unencrypted_file, encrypted_file, dest_key)
    os.remove(unencrypted_file)
    return True

def copy_reenc_private_files():
    """This procedure merges the cluster and $area private files directories
       into one $area hierarchy. Then, for all areas except the main one, it
       searches encoded files to reencrypt them using the
       cluster_decrypt_password of this area.
    """
    # Find all files in conf.dir_files_private, decrypt them with main area
    # cluster_decrypt_passwd and re-encrypt them with cluster_decrypt_password of
    # each other area
    pool = Pool()
    results = []
    master_key = get_area_decrypt_password(conf.main_area)
    for area in conf.areas:
        # copy file in area subdir
        private_files_area_build_dir = os.path.join(conf.dir_files_private, area)
        for subdir in ['cluster', area]:
            conf_copy(os.path.join(conf.src_dir_files_private, subdir),
                      private_files_area_build_dir)
        if area != conf.main_area:
            # find all encrypted files
            encrypted_files=[]
            for root, dirnames, filenames in os.walk(private_files_area_build_dir):
                for filename in fnmatch.filter(filenames, '*.enc'):
                      encrypted_files.append(os.path.join(root, filename))
            # read area cluster_decrypt_password
            area_key = get_area_decrypt_password(area)
            for encrypted_file in encrypted_files:
                results.append(pool.apply_async(
                    reenc_file,
                    [encrypted_file, master_key, area_key]
                ))
    pool.close()
    pool.join()
    success = 0
    errors = 0
    for result in results:
        function_return = result.get()
        if function_return:
            success += 1
        else:
            errors += 1
    logger.info("Reenc Files: Reencrypted %d files, %d errors", success, errors)

def cleanup_run():
    """Remove the run tmp dir."""

    logger.debug("removing run tmp dir %s", conf.dir_tmp_gen)
    shutil.rmtree(conf.dir_tmp_gen)

def cleanup_full():
    """Remove the full app tmp dir."""
    if not os.path.isdir(conf.dir_tmp):
        logger.info("app tmp dir %s does not exists, nothing to remove.", conf.dir_tmp)
    else:
        logger.info("removing app tmp dir %s", conf.dir_tmp)
        shutil.rmtree(conf.dir_tmp)

def main():

    #
    # init
    #
    args = parse_args()
    setup_warnings(args.enable_python_warnings)
    setup_logger()
    parse_conf()
    override_conf(args)
    conf.dump()
    envHandler = environmentHandler.environmentHandlerFactory(conf)

    #
    # run
    #
    if conf.full_tmp_cleanup:
        cleanup_full()
    elif conf.list_environments:
        envHandler.list()
    else:
        init_tmpd()
        decrypt_extract_eyaml_keys()
        copy_reenc_private_files()
        gen_env_conf()
        build_tarballs()
        envHandler.upload()
        cleanup_run()

if __name__ == '__main__':
    main()

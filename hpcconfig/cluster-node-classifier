#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2018-2021 EDF SA
# Contact:
#       CCN - HPC <dsp-cspit-ccn-hpc@edf.fr>
#       1, Avenue du General de Gaulle
#       92140 Clamart
#
# Authors: CCN - HPC <dsp-cspit-ccn-hpc@edf.fr>
#
# This file is part of hpc-config.
#
# puppet-hpc is free software: you can redistribute in and/or
# modify it under the terms of the GNU General Public License,
# version 2, as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with puppet-hpc. If not, see
# <http://www.gnu.org/licenses/>.

from __future__ import print_function
import sys
import re
import yaml
from ClusterShell.NodeSet import NodeSet

CONF='/etc/hpc-config/cluster-nodes.yaml'


def load_conf():

    conf = None
    try:
        with open(CONF, 'r') as fh_c:
            conf = yaml.load(fh_c)
    except FileNotFoundError:
        print('unable to open file',
              CONF, file=sys.stderr)
        sys.exit(1)
        

    return conf


def get_noderole(prefix, nodename, roles=None):

    noderole_re_s = r"%s([a-z0-9]*[a-z]+)\d+" % (prefix)
    match = re.search(noderole_re_s, nodename)
    if match is None:
        if roles:
            list = nodename.split(".")
            node = list[0]
            for role, descriptors in roles.items():
                for descriptor in descriptors:
                    if node.split('.')[0] in NodeSet(descriptor):
                        return role
                    if role == descriptor:
                        return role
        else:
            print('unable to extract role name from hostname',
                  nodename, file=sys.stderr)
            sys.exit(1)
    return match.group(1)


def get_nodearea(areas, role, nodename, roles=None):

    list = nodename.split(".")
    node = list[0]
    for area, descriptors in areas.items():
        for descriptor in descriptors:
            if node in NodeSet(descriptor):
                return area
            if role == descriptor:
                return area

    if roles:
        return 'default'
    else:
        print('unable to find area for role',
              role, file=sys.stderr)
        sys.exit(1)


def main():

    nodename = sys.argv[1]

    conf = load_conf()

    site = {'parameters': {}}

    # cluster_name and cluster_prefix are mandatory
    for key in ['cluster_name', 'cluster_prefix']:
        if not key in conf:
            print("parameter %s not found in %s",
                  key, CONF, file=sys.stderr)
            sys.exit(1)

    site['parameters']['cluster_name'] = conf['cluster_name']
    site['parameters']['cluster_prefix'] = conf['cluster_prefix']

    # extract node role from nodename
    role = get_noderole(conf['cluster_prefix'], nodename, conf.get('roles'))
    site['parameters']['puppet_role'] = role

    # areas are optional but require prefix
    if 'areas' in conf:
        site['parameters']['area'] = get_nodearea(conf['areas'], role, nodename, conf.get('roles'))
    else:
        site['parameters']['area'] = 'default'

    print(yaml.dump(site))


if __name__ == '__main__':
    main()
